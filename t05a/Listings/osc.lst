C51 COMPILER V9.59.0.0   OSC                                                               05/08/2025 14:42:45 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE OSC
OBJECT MODULE PLACED IN .\Objects\osc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE osc.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\osc.l
                    -st) TABS(2) OBJECT(.\Objects\osc.obj)

line level    source

   1          /*------------------------------------------*/
   2          /*  file:     osc.c           */
   3          /*  revision: 0 Samuel Lee        */
   4          /*        1 Samuel Lee  2015-04-12  */
   5          /*                      */
   6          /*      (C)2012-2015 IES-Lab      */
   7          /*      All rights reserved.      */
   8          /*------------------------------------------*/
   9          /*------------------------------------------------------------------------------*/
  10          /*    INCLUDES                                  */
  11          /*------------------------------------------------------------------------------*/
  12          #include "osc.h"
  13          
  14          /*------------------------------------------------------------------------------*/
  15          /*    GLOBAL FUNCTIONS (IMPLEMENTATIONS)                      */
  16          /*------------------------------------------------------------------------------*/
  17          
  18          /* Osc_Init(): only EXTERNAL_OSC/CRYSTAL supported! */
  19          
  20          void Osc_Init(Osc_Init_Parameter_t *initParameter)
  21          { 
  22   1        switch(initParameter->Source_Select)
  23   1        {
  24   2          case EXTERNAL_OSC:
  25   2      
  26   2            switch(initParameter->External_Mode)
  27   2            {
  28   3              case CRYSTAL:
  29   3      
  30   3                if(initParameter->Frequency>6700000){
  31   4                  OSCXCN = Reg_Field_Set(OSCXCN, BIT2);
  32   4                  OSCXCN = Reg_Field_Set(OSCXCN, BIT1);
  33   4                  OSCXCN = Reg_Field_Set(OSCXCN, BIT0); 
  34   4                }
  35   3                else{
  36   4                  if(initParameter->Frequency>2200000){
  37   5                    OSCXCN = Reg_Field_Set(OSCXCN, BIT2);
  38   5                    OSCXCN = Reg_Field_Set(OSCXCN, BIT1);
  39   5                    OSCXCN = Reg_Field_Clr(OSCXCN, BIT0);
  40   5                  }
  41   4                  else{
  42   5                    if(initParameter->Frequency>720000){
  43   6                      OSCXCN = Reg_Field_Set(OSCXCN, BIT2);
  44   6                      OSCXCN = Reg_Field_Clr(OSCXCN, BIT1);
  45   6                      OSCXCN = Reg_Field_Set(OSCXCN, BIT0);
  46   6                    }
  47   5                    else{
  48   6                      if(initParameter->Frequency>270000){
  49   7                        OSCXCN = Reg_Field_Set(OSCXCN, BIT2);
  50   7                        OSCXCN = Reg_Field_Clr(OSCXCN, BIT1);
  51   7                        OSCXCN = Reg_Field_Clr(OSCXCN, BIT0);
  52   7                      }
  53   6                      else{
  54   7                        if(initParameter->Frequency>95000){
C51 COMPILER V9.59.0.0   OSC                                                               05/08/2025 14:42:45 PAGE 2   

  55   8                          OSCXCN = Reg_Field_Clr(OSCXCN, BIT2);
  56   8                          OSCXCN = Reg_Field_Set(OSCXCN, BIT1);
  57   8                          OSCXCN = Reg_Field_Set(OSCXCN, BIT0);
  58   8                        }
  59   7                        else{
  60   8                          if(initParameter->Frequency>30000){
  61   9                            OSCXCN = Reg_Field_Clr(OSCXCN, BIT2);
  62   9                            OSCXCN = Reg_Field_Set(OSCXCN, BIT1);
  63   9                            OSCXCN = Reg_Field_Clr(OSCXCN, BIT0);
  64   9                          }
  65   8                          else{
  66   9                            if(initParameter->Frequency>12000){
  67  10                              OSCXCN = Reg_Field_Clr(OSCXCN, BIT2);
  68  10                              OSCXCN = Reg_Field_Clr(OSCXCN, BIT1);
  69  10                              OSCXCN = Reg_Field_Set(OSCXCN, BIT0);
  70  10                            }
  71   9                            else{
  72  10                              OSCXCN = Reg_Field_Clr(OSCXCN, BIT2);
  73  10                              OSCXCN = Reg_Field_Clr(OSCXCN, BIT1);
  74  10                              OSCXCN = Reg_Field_Clr(OSCXCN, BIT0);
  75  10                            }
  76   9                          }
  77   8                        }
  78   7                      }
  79   6                    }
  80   5                  }
  81   4                }
  82   3                OSCXCN = Reg_Field_Set(OSCXCN, BIT6);
  83   3                OSCXCN = Reg_Field_Set(OSCXCN, BIT5);
  84   3                OSCXCN = Reg_Field_Clr(OSCXCN, BIT4);
  85   3                break;
  86   3      
  87   3              case DISABLE:
  88   3              case COMS_CLK:
  89   3              case COMS_CLK_DIV2:
  90   3              case RC_OR_C_DIV2:
  91   3              case CRYSTAL_DIV2:
  92   3              default:
  93   3                break;
  94   3      
  95   3            }
  96   2      
  97   2            while (!(OSCXCN & 0x80));
  98   2            OSCICN = Reg_Field_Set(OSCICN, BIT3);
  99   2            OSCICN = Reg_Field_Set(OSCICN, BIT7);
 100   2            OSCICN = Reg_Field_Clr(OSCICN, BIT2);
 101   2            while (!(OSCXCN & 0x80));
 102   2            OSCICN = Reg_Field_Clr(OSCICN, BIT7);
 103   2            break;
 104   2      
 105   2          case INTERNAL_OSC:
 106   2            break;
 107   2      
 108   2          default:
 109   2            break;
 110   2        }
 111   1      }
 112          
 113          /* end */


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.59.0.0   OSC                                                               05/08/2025 14:42:45 PAGE 3   

   CODE SIZE        =    404    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
