C51 COMPILER V9.60.0.0   OSC                                                               04/21/2025 19:27:23 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OSC
OBJECT MODULE PLACED IN .\Objects\osc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE osc.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\osc.l
                    -st) TABS(2) OBJECT(.\Objects\osc.obj)

line level    source

   1          /*------------------------------------------*/
   2          /*  file:     osc.c           */
   3          /*  revision: 0 Samuel Lee        */
   4          /*        1 Samuel Lee  2015-04-12  */
   5          /*                      */
   6          /*      (C)2012-2015 IES-Lab      */
   7          /*      All rights reserved.      */
   8          /*------------------------------------------*/
   9          /*------------------------------------------------------------------------------*/
  10          /*    INCLUDES                                  */
  11          /*------------------------------------------------------------------------------*/
  12          #include "common.h"
  13          #include "osc.h"
  14          
  15          /*------------------------------------------------------------------------------*/
  16          /*    GLOBAL FUNCTIONS (IMPLEMENTATIONS)                      */
  17          /*------------------------------------------------------------------------------*/
  18          
  19          /* Osc_Init(): only EXTERNAL_OSC/CRYSTAL supported! */
  20          
  21          void Osc_Init(Osc_Init_Parameter_t *initParameter)
  22          { 
  23   1        switch(initParameter->Source_Select)
  24   1        {
  25   2          case EXTERNAL_OSC:
  26   2      
  27   2            switch(initParameter->External_Mode)
  28   2            {
  29   3              case CRYSTAL:
  30   3      
  31   3                if(initParameter->Frequency>6700000){
  32   4                  OSCXCN = Reg_Field_Set(OSCXCN, BIT2);
  33   4                  OSCXCN = Reg_Field_Set(OSCXCN, BIT1);
  34   4                  OSCXCN = Reg_Field_Set(OSCXCN, BIT0); 
  35   4                }
  36   3                else{
  37   4                  if(initParameter->Frequency>2200000){
  38   5                    OSCXCN = Reg_Field_Set(OSCXCN, BIT2);
  39   5                    OSCXCN = Reg_Field_Set(OSCXCN, BIT1);
  40   5                    OSCXCN = Reg_Field_Clr(OSCXCN, BIT0);
  41   5                  }
  42   4                  else{
  43   5                    if(initParameter->Frequency>720000){
  44   6                      OSCXCN = Reg_Field_Set(OSCXCN, BIT2);
  45   6                      OSCXCN = Reg_Field_Clr(OSCXCN, BIT1);
  46   6                      OSCXCN = Reg_Field_Set(OSCXCN, BIT0);
  47   6                    }
  48   5                    else{
  49   6                      if(initParameter->Frequency>270000){
  50   7                        OSCXCN = Reg_Field_Set(OSCXCN, BIT2);
  51   7                        OSCXCN = Reg_Field_Clr(OSCXCN, BIT1);
  52   7                        OSCXCN = Reg_Field_Clr(OSCXCN, BIT0);
  53   7                      }
  54   6                      else{
C51 COMPILER V9.60.0.0   OSC                                                               04/21/2025 19:27:23 PAGE 2   

  55   7                        if(initParameter->Frequency>95000){
  56   8                          OSCXCN = Reg_Field_Clr(OSCXCN, BIT2);
  57   8                          OSCXCN = Reg_Field_Set(OSCXCN, BIT1);
  58   8                          OSCXCN = Reg_Field_Set(OSCXCN, BIT0);
  59   8                        }
  60   7                        else{
  61   8                          if(initParameter->Frequency>30000){
  62   9                            OSCXCN = Reg_Field_Clr(OSCXCN, BIT2);
  63   9                            OSCXCN = Reg_Field_Set(OSCXCN, BIT1);
  64   9                            OSCXCN = Reg_Field_Clr(OSCXCN, BIT0);
  65   9                          }
  66   8                          else{
  67   9                            if(initParameter->Frequency>12000){
  68  10                              OSCXCN = Reg_Field_Clr(OSCXCN, BIT2);
  69  10                              OSCXCN = Reg_Field_Clr(OSCXCN, BIT1);
  70  10                              OSCXCN = Reg_Field_Set(OSCXCN, BIT0);
  71  10                            }
  72   9                            else{
  73  10                              OSCXCN = Reg_Field_Clr(OSCXCN, BIT2);
  74  10                              OSCXCN = Reg_Field_Clr(OSCXCN, BIT1);
  75  10                              OSCXCN = Reg_Field_Clr(OSCXCN, BIT0);
  76  10                            }
  77   9                          }
  78   8                        }
  79   7                      }
  80   6                    }
  81   5                  }
  82   4                }
  83   3                OSCXCN = Reg_Field_Set(OSCXCN, BIT6);
  84   3                OSCXCN = Reg_Field_Set(OSCXCN, BIT5);
  85   3                OSCXCN = Reg_Field_Clr(OSCXCN, BIT4);
  86   3                break;
  87   3      
  88   3              case DISABLE:
  89   3              case COMS_CLK:
  90   3              case COMS_CLK_DIV2:
  91   3              case RC_OR_C_DIV2:
  92   3              case CRYSTAL_DIV2:
  93   3              default:
  94   3                break;
  95   3      
  96   3            }
  97   2      
  98   2            while (!(OSCXCN & 0x80));
  99   2            OSCICN = Reg_Field_Set(OSCICN, BIT3);
 100   2            OSCICN = Reg_Field_Set(OSCICN, BIT7);
 101   2            OSCICN = Reg_Field_Clr(OSCICN, BIT2);
 102   2            while (!(OSCXCN & 0x80));
 103   2            OSCICN = Reg_Field_Clr(OSCICN, BIT7);
 104   2            break;
 105   2      
 106   2          case INTERNAL_OSC:
 107   2            break;
 108   2      
 109   2          default:
 110   2            break;
 111   2        }
 112   1      }
 113          
 114          /* end */


C51 COMPILER V9.60.0.0   OSC                                                               04/21/2025 19:27:23 PAGE 3   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    404    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
